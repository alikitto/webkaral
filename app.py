from flask import Flask, render_template, request, jsonify
import requests
import os
from ftplib import FTP
import io
import base64
import random
import tempfile
import ffmpeg
import PIL
from PIL import Image

app = Flask(__name__)

# WooCommerce API
WC_API_URL = os.getenv("WC_API_URL", "https://karal.az/wp-json/wc/v3")
WC_CONSUMER_KEY = os.getenv("WC_CONSUMER_KEY")
WC_CONSUMER_SECRET = os.getenv("WC_CONSUMER_SECRET")

# WordPress API
WP_USERNAME = os.getenv("WP_USERNAME", "alikitto")
WP_PASSWORD = os.getenv("WP_PASSWORD", "HsbD0gjVhsj0Fb1KXrMx4nLQ")
WP_MEDIA_URL = "https://karal.az/wp-json/wp/v2/media"

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
auth = base64.b64encode(f"{WP_USERNAME}:{WP_PASSWORD}".encode()).decode()
HEADERS = {"Authorization": f"Basic {auth}"}

# –î–ê–ù–ù–´–ï –î–õ–Ø FTP-–î–û–°–¢–£–ü–ê
FTP_HOST = "116.202.196.92"
FTP_PORT = 21
FTP_USER = "pypy777"
FTP_PASS = "jN2wR7rD2f"
FTP_DIR = "/wp-content/uploads/original_photos/"  # –ü—É—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

def upload_file_via_ftp(file, filename_slug, file_type):
    """ –ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ) –Ω–∞ FTP —Å–µ—Ä–≤–µ—Ä """
    try:
        print("üìå [DEBUG] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ FTP —Å–µ—Ä–≤–µ—Ä—É...")

        ftp = FTP(FTP_HOST)
        ftp.set_debuglevel(2)  # –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É FTP
        ftp.login(FTP_USER, FTP_PASS)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞
        if file_type not in ["image", "video"]:
            print(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞ ({file_type})")
            return None

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if file_type == "image":
            target_dir = "/wp-content/uploads/original_photos/"
            file_ext = ".jpg"
        elif file_type == "video":
            target_dir = "/wp-content/uploads/original_videos/"
            file_ext = os.path.splitext(file.filename)[-1].lower()  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ (MOV –∏–ª–∏ MP4)
            if file_ext not in [".mp4", ".mov"]:
                print(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ ({file_ext})")
                return None

        ftp.cwd(target_dir)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω—É–∂–Ω—É—é –ø–∞–ø–∫—É
        print(f"üìå [DEBUG] –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è FTP: {ftp.pwd()}")

        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫
        file_data = io.BytesIO(file.read())

        print(f"üìå [DEBUG] –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª {filename_slug}{file_ext} ...")

        ftp.storbinary(f"STOR {filename_slug}{file_ext}", file_data)

        print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ FTP: {target_dir}{filename_slug}{file_ext}")

        ftp.quit()
        return f"https://karal.az{target_dir}{filename_slug}{file_ext}"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –ø–æ FTP: {e}")
        return None


def save_original_file(file, filename_slug, file_type):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ) –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ FTP"""
    if file_type not in ["image", "video"]:
        print(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞ ({file_type})")
        return None
    return upload_file_via_ftp(file, filename_slug, file_type)


        
def save_original_file(file, filename_slug, file_type):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ) –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —á–µ—Ä–µ–∑ FTP"""
    return upload_file_via_ftp(file, filename_slug, file_type)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ –∏ —Ñ–æ—Ç–æ
RESOLUTION_VIDEO = (720, 720)  # 1:1 —Ñ–æ—Ä–º–∞—Ç
RESOLUTION_IMAGE = (1000, 1000)  # 1:1 —Ñ–æ—Ä–º–∞—Ç
BITRATE = "2000k"

CATEGORY_DATA = {
    "126": {"name": "Qƒ±zƒ±l √ºz√ºk", "slug": "qizil-uzuk"},
    "132": {"name": "Qƒ±zƒ±l sƒ±rƒüa", "slug": "qizil-sirqa"},
    "140": {"name": "Qƒ±zƒ±l sep", "slug": "qizil-sep"},
    "138": {"name": "Qƒ±zƒ±l qolbaq", "slug": "qizil-qolbaq"},
    "144": {"name": ["Qƒ±zƒ±l d…ôst", "Qƒ±zƒ±l komplekt"], "slug": "qizil-komplekt-dest"}
}

GOLD_PURITY_MAP = {
    "105": "585 (14K)",
    "106": "750 (18K)"
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ WordPress
import mimetypes

def upload_media(file, filename):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ WordPress –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID"""
    try:
        files = {"file": (filename, file, "image/jpeg")}
        response = requests.post(WP_MEDIA_URL, headers=HEADERS, files=files)

        if response.status_code == 201:
            media_id = response.json().get("id")
            print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ WordPress! ID: {media_id}")
            return media_id
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ WordPress: {response.text}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ WordPress: {e}")
        return None


    filename = filename or "uploaded_file.jpg"
    print(f"üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª: {filename}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø —Ñ–∞–π–ª–∞
    mime_type, _ = mimetypes.guess_type(filename)
    if not mime_type:
        mime_type = "application/octet-stream"  # –§–æ–ª–±—ç–∫ –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞

    files = {"file": (filename, file, mime_type)}
    response = requests.post(WP_MEDIA_URL, headers=HEADERS, files=files)

    if response.status_code == 201:
        media_id = response.json().get("id")
        print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω! ID: {media_id}")
        return media_id
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.text}")
        return None

# –û–±—Ä–µ–∑–∫–∞ –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ 1:1
from PIL import Image, ImageOps

def process_image(image, filename_slug):
    """–û–±—Ä–µ–∑–∫–∞ —Ñ–æ—Ç–æ –≤ 1000x1000 –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –¥–∏—Å–∫"""
    try:
        temp_output = os.path.join(tempfile.gettempdir(), f"{filename_slug}.jpg")

        img = Image.open(image)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–≤–æ—Ä–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img = ImageOps.exif_transpose(img)

        width, height = img.size
        crop_size = min(width, height)
        left = (width - crop_size) // 2
        top = (height - crop_size) // 2
        right = left + crop_size
        bottom = top + crop_size
        img = img.crop((left, top, right, bottom))

        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –≤ 1000x1000
        img = img.resize((1000, 1000), Image.LANCZOS)
        img.save(temp_output, format="JPEG")

        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {temp_output}")
        return temp_output
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        return None


# –û–±—Ä–µ–∑–∫–∞ –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ 1:1
def convert_and_crop_video(video, output_filename):
    """ –û–±—Ä–µ–∑–∫–∞ –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç 1:1 –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ MP4 """
    try:
        temp_input = tempfile.NamedTemporaryFile(delete=False, suffix=".mov")
        temp_output = os.path.join(tempfile.gettempdir(), output_filename)

        print(f"üîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ {video.filename} –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_input.name}")
        video.save(temp_input.name)

        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤–∏–¥–µ–æ –≤ 1:1...")

        # –û–±—Ä–µ–∑–∞–µ–º –≤ 1:1
        ffmpeg.input(temp_input.name).filter(
            "crop", "min(iw,ih)", "min(iw,ih)", "(iw-min(iw,ih))/2", "(ih-min(iw,ih))/2"
        ).filter(
            "scale", 720, 720
        ).output(
            temp_output, vcodec="libx264", acodec="aac", bitrate=BITRATE
        ).run(overwrite_output=True)

        print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {temp_output}")
        return temp_output
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {e}")
        return None

@app.route("/")
def home():
    return render_template("index.html", categories=CATEGORY_DATA)

@app.route("/add-product", methods=["POST"])
def add_product():
    try:
        print("üìå [INFO] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")

        category_id = request.form.get("category")
        weight = request.form.get("weight")
        gold_purity_id = request.form.get("gold_purity")
        price = request.form.get("price")
        sale_price = request.form.get("sale_price", "0")
        image = request.files.get("image")
        video = request.files.get("video")

        if not category_id or not weight or not price:
            print("‚ùå [ERROR] –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
            return jsonify({"status": "error", "message": "‚ùå –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"}), 400

        gold_purity = GOLD_PURITY_MAP.get(gold_purity_id, "585 (14K)")
        category_info = CATEGORY_DATA.get(category_id, {})
        product_name = random.choice(category_info["name"]) if isinstance(category_info["name"], list) else category_info["name"]
        product_slug = f"{category_info['slug']}-{random.randint(1000, 9999)}"

        print(f"üìå [INFO] –°–æ–∑–¥–∞—ë–º —Ç–æ–≤–∞—Ä: {product_name}, Slug: {product_slug}, –í–µ—Å: {weight}, –¶–µ–Ω–∞: {price}")

        # 1Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª —Ñ–æ—Ç–æ –≤ `/original_photos/`
        original_photo_url = None
        if image:
            original_photo_url = save_original_file(image, product_slug, "image")

        # 2Ô∏è‚É£ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ WordPress (1000x1000)
        image_id = None
        if image:
            processed_image = process_image(image, product_slug)
            if processed_image:
                with open(processed_image, "rb") as img_file:
                    image_id = upload_media(img_file, filename=f"{product_slug}.jpg")

        # 3Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –≤–∏–¥–µ–æ –≤ `/original_videos/`
        original_video_url = None
        if video:
            original_video_url = save_original_file(video, product_slug, "video")

        # 4Ô∏è‚É£ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –≤ WordPress (720x720)
        video_id = None
        if video:
            output_filename = f"{product_slug}.mp4"
            converted_video_path = convert_and_crop_video(video, output_filename)
            if converted_video_path:
                with open(converted_video_path, "rb") as converted_video:
                    video_id = upload_media(converted_video, filename=output_filename)

        print(f"‚úÖ [INFO] –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ: {original_photo_url}")
        print(f"‚úÖ [INFO] –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ID: {image_id}")
        print(f"‚úÖ [INFO] –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ: {original_video_url}")
        print(f"‚úÖ [INFO] –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ ID: {video_id}")

        # 5Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º —Ç–æ–≤–∞—Ä –≤ WooCommerce
        product_data = {
            "name": product_name,
            "slug": product_slug,
            "regular_price": price,
            "sale_price": sale_price if sale_price != "0" else None,
            "categories": [{"id": int(category_id)}],
            "images": [{"id": image_id}] if image_id else [],
            "attributes": [
                {"id": 2, "name": "∆èyar", "options": [gold_purity], "visible": True, "variation": False}
            ],
            "meta_data": [
                {"key": "_weight", "value": weight},
                {"key": "_product_video_autoplay", "value": "on"},
                {"key": "_gold_purity", "value": gold_purity}
            ]
        }

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—ã –≤ –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ
        if original_photo_url:
            product_data["meta_data"].append({"key": "_original_photo_url", "value": original_photo_url})
        if original_video_url:
            product_data["meta_data"].append({"key": "_original_video_url", "value": original_video_url})

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ WooCommerce
        if video_id:
            product_data["meta_data"].append({"key": "_product_video_gallery", "value": video_id})

        print("üìå [INFO] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞...")
        response = requests.post(
            WC_API_URL + "/products",
            json=product_data,
            params={"consumer_key": WC_CONSUMER_KEY, "consumer_secret": WC_CONSUMER_SECRET}
        )

        print(f"üìå [INFO] –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ WooCommerce: {response.status_code}")
        print(f"üìå [INFO] –î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞: {response.text}")

        if response.status_code == 201:
            return jsonify({"status": "success", "message": "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!"})
        else:
            print("‚ùå [ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")
            return jsonify({"status": "error", "message": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞"}), 400

    except Exception as e:
        print(f"‚ùå [ERROR] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ add_product: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500


    except Exception as e:
        print(f"‚ùå [ERROR] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ add_product: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500
