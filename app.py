from flask import Flask, render_template, request, jsonify
import requests
import os
from ftplib import FTP
import io
import base64
import random
import tempfile
import ffmpeg
from PIL import Image, ImageOps

app = Flask(__name__)

# WooCommerce API
WC_API_URL = os.getenv("WC_API_URL", "https://karal.az/wp-json/wc/v3")
WC_CONSUMER_KEY = os.getenv("WC_CONSUMER_KEY")
WC_CONSUMER_SECRET = os.getenv("WC_CONSUMER_SECRET")

# WordPress API
WP_USERNAME = os.getenv("WP_USERNAME", "alikitto")
WP_PASSWORD = os.getenv("WP_PASSWORD", "HsbD0gjVhsj0Fb1KXrMx4nLQ")
WP_MEDIA_URL = "https://karal.az/wp-json/wp/v2/media"

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
auth = base64.b64encode(f"{WP_USERNAME}:{WP_PASSWORD}".encode()).decode()
HEADERS = {"Authorization": f"Basic {auth}"}

# –î–ê–ù–ù–´–ï –î–õ–Ø FTP-–î–û–°–¢–£–ü–ê
FTP_HOST = "116.202.196.92"
FTP_USER = "pypy777"
FTP_PASS = "jN2wR7rD2f"
FTP_MOV_DIR = "/wp-content/uploads/original_videos/"  # –ü—É—Ç—å –¥–ª—è MOV

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ
BITRATE = "1500k"  # –£–º–µ–Ω—å—à–∏–ª –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
RESOLUTION_VIDEO = (720, 720)

# ------------------- –§–£–ù–ö–¶–ò–ò -------------------
def upload_file_via_ftp(file_path, filename_slug, ftp_dir):
    """ –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ FTP —Å–µ—Ä–≤–µ—Ä """
    try:
        print("üìå [DEBUG] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ FTP —Å–µ—Ä–≤–µ—Ä—É...")

        with FTP(FTP_HOST) as ftp:
            ftp.login(FTP_USER, FTP_PASS)
            ftp.cwd(ftp_dir)

            print(f"üìå [DEBUG] –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª {filename_slug} ...")

            with open(file_path, "rb") as file:
                ftp.storbinary(f"STOR {filename_slug}", file)

        print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ FTP: {ftp_dir}{filename_slug}")
        return f"https://karal.az{ftp_dir}{filename_slug}"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –ø–æ FTP: {e}")
        return None

def convert_video_to_mp4(video, filename_slug):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç MOV –≤ MP4 –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞"""
    try:
        temp_input = tempfile.NamedTemporaryFile(delete=False, suffix=".mov")
        temp_output = os.path.join(tempfile.gettempdir(), f"{filename_slug}.mp4")

        print(f"üîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ MOV {video.filename} –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_input.name}")
        video.save(temp_input.name)

        print("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MP4 –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞...")
        ffmpeg.input(temp_input.name).output(
            temp_output, vcodec="libx264", acodec="aac", bitrate=BITRATE
        ).run(overwrite_output=True)

        print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {temp_output}")
        return temp_output
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {e}")
        return None

def convert_and_crop_video(video, filename_slug):
    """ –û–±—Ä–µ–∑–∫–∞ –≤–∏–¥–µ–æ –≤ 1:1 –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ MP4 """
    try:
        temp_input = tempfile.NamedTemporaryFile(delete=False, suffix=".mov")
        temp_output = os.path.join(tempfile.gettempdir(), f"{filename_slug}_cropped.mp4")

        print(f"üîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º MOV {video.filename} –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_input.name}")
        video.save(temp_input.name)

        print("üîÑ –û–±—Ä–µ–∑–∞–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 1:1 (720x720)...")
        ffmpeg.input(temp_input.name).filter(
            "crop", "min(iw,ih)", "min(iw,ih)", "(iw-min(iw,ih))/2", "(ih-min(iw,ih))/2"
        ).filter(
            "scale", RESOLUTION_VIDEO[0], RESOLUTION_VIDEO[1]
        ).output(
            temp_output, vcodec="libx264", acodec="aac", bitrate=BITRATE
        ).run(overwrite_output=True)

        print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏ –æ–±—Ä–µ–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã: {temp_output}")
        return temp_output
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {e}")
        return None

def upload_media(file_path, filename):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ WordPress –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID"""
    try:
        with open(file_path, "rb") as file:
            mime_type = "video/mp4" if filename.endswith(".mp4") else "image/jpeg"
            files = {"file": (filename, file, mime_type)}
            response = requests.post(WP_MEDIA_URL, headers=HEADERS, files=files)

            if response.status_code == 201:
                media_id = response.json().get("id")
                print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ WordPress! ID: {media_id}")
                return media_id
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ WordPress: {response.text}")
                return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ WordPress: {e}")
        return None

# ------------------- –û–ë–†–ê–ë–û–¢–ö–ê –¢–û–í–ê–†–ê -------------------
@app.route("/")
def home():
    return render_template("index.html", categories=CATEGORY_DATA)

@app.route("/add-product", methods=["POST"])
def add_product():
    try:
        print("üìå [INFO] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")

        category_id = request.form.get("category")
        weight = request.form.get("weight")
        price = request.form.get("price")
        video = request.files.get("video")

        if not category_id or not weight or not price:
            print("‚ùå [ERROR] –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
            return jsonify({"status": "error", "message": "‚ùå –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"}), 400

        product_slug = f"product-{random.randint(1000, 9999)}"

        # 1Ô∏è‚É£ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º MOV –≤ MP4 (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ FTP
        original_video_url = None
        if video:
            original_mp4 = convert_video_to_mp4(video, product_slug)
            if original_mp4:
                original_video_url = upload_file_via_ftp(original_mp4, f"{product_slug}.mp4", FTP_MOV_DIR)

        # 2Ô∏è‚É£ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ (720x720) –≤ WordPress
        video_id = None
        if video:
            cropped_video_path = convert_and_crop_video(video, product_slug)
            if cropped_video_path:
                video_id = upload_media(cropped_video_path, f"{product_slug}.mp4")

        # 3Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º —Ç–æ–≤–∞—Ä –≤ WooCommerce
        product_data = {
            "name": f"Product {product_slug}",
            "slug": product_slug,
            "regular_price": price,
            "categories": [{"id": int(category_id)}],
            "meta_data": [
                {"key": "_weight", "value": weight},
                {"key": "_original_video_url", "value": original_video_url} if original_video_url else {},
                {"key": "_product_video_gallery", "value": video_id} if video_id else {}
            ]
        }

        response = requests.post(
            WC_API_URL + "/products",
            json=product_data,
            params={"consumer_key": WC_CONSUMER_KEY, "consumer_secret": WC_CONSUMER_SECRET}
        )

        print(f"üìå [INFO] WooCommerce –æ—Ç–≤–µ—Ç: {response.status_code}")
        return jsonify({"status": "success" if response.status_code == 201 else "error"})

    except Exception as e:
        print(f"‚ùå [ERROR] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ add_product: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500
