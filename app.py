from flask import Flask, render_template, request, jsonify
import os
import base64
import random
import tempfile
import requests
import mimetypes
import ffmpeg
from PIL import Image, ImageOps

app = Flask(__name__)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–ª–µ–≤—É—é —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å
RESOLUTION_IMAGE = (900, 900)
RESOLUTION_VIDEO = (900, 900)
BITRATE = "2500k"

# –î–∞–Ω–Ω—ã–µ –¥–ª—è API WooCommerce –∏ WordPress
WC_API_URL = os.getenv("WC_API_URL", "https://karal.az/wp-json/wc/v3")
WC_CONSUMER_KEY = os.getenv("WC_CONSUMER_KEY")
WC_CONSUMER_SECRET = os.getenv("WC_CONSUMER_SECRET")

WP_USERNAME = os.getenv("WP_USERNAME", "alikitto")
WP_PASSWORD = os.getenv("WP_PASSWORD", "HsbD0gjVhsj0Fb1KXrMx4nLQ")
WP_MEDIA_URL = "https://karal.az/wp-json/wp/v2/media"

auth = base64.b64encode(f"{WP_USERNAME}:{WP_PASSWORD}".encode()).decode()
HEADERS = {"Authorization": f"Basic {auth}"}

# –û–±—Ä–µ–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ 900x900
def process_image(image, filename_slug):
    """ –û–±—Ä–µ–∑–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ 900x900 –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç """
    try:
        temp_input = tempfile.NamedTemporaryFile(delete=False, suffix=".jpg")
        temp_output = os.path.join(tempfile.gettempdir(), f"{filename_slug}.jpg")

        image.save(temp_input.name)
        img = Image.open(temp_input.name)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–≤–æ—Ä–æ—Ç –ø–æ EXIF-–¥–∞–Ω–Ω—ã–º
        img = ImageOps.exif_transpose(img)

        width, height = img.size

        # –û–±—Ä–µ–∑–∫–∞ –≤ 1:1 (—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏)
        crop_size = min(width, height)
        left = (width - crop_size) // 2
        top = (height - crop_size) // 2
        right = left + crop_size
        bottom = top + crop_size
        img = img.crop((left, top, right, bottom))

        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –≤ 900x900
        img = img.resize(RESOLUTION_IMAGE, Image.LANCZOS)
        img.save(temp_output, format="JPEG")

        return temp_output
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        return None

# –û–±—Ä–µ–∑–∫–∞ –≤–∏–¥–µ–æ –¥–æ 900x900
def convert_and_crop_video(video, output_filename):
    """ –û–±—Ä–µ–∑–∫–∞ –≤–∏–¥–µ–æ –¥–æ 900x900 –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ MP4 """
    try:
        temp_input = tempfile.NamedTemporaryFile(delete=False, suffix=".mov")
        temp_output = os.path.join(tempfile.gettempdir(), output_filename)

        print(f"üîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ {video.filename} –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_input.name}")
        video.save(temp_input.name)

        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤–∏–¥–µ–æ –≤ 900x900...")

        ffmpeg.input(temp_input.name).filter(
            "crop", "min(iw,ih)", "min(iw,ih)", "(iw-min(iw,ih))/2", "(ih-min(iw,ih))/2"
        ).filter(
            "scale", 900, 900
        ).output(
            temp_output, vcodec="libx264", acodec="aac", bitrate=BITRATE
        ).run(overwrite_output=True)

        print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {temp_output}")
        return temp_output
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {e}")
        return None

@app.route("/add-product", methods=["POST"])
def add_product():
    try:
        print("üìå [INFO] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")

        category_id = request.form.get("category")
        weight = request.form.get("weight")
        price = request.form.get("price")
        sale_price = request.form.get("sale_price", "0")
        image = request.files.get("image")
        video = request.files.get("video")

        if not category_id or not weight or not price:
            return jsonify({"status": "error", "message": "‚ùå –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"}), 400

        product_slug = f"product-{random.randint(1000, 9999)}"

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_id = None
        if image:
            processed_image = process_image(image, product_slug)
            if processed_image:
                with open(processed_image, "rb") as img_file:
                    image_id = upload_media(img_file, filename=f"{product_slug}.jpg")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
        video_id = None
        if video:
            output_filename = f"{product_slug}.mp4"
            converted_video_path = convert_and_crop_video(video, output_filename)
            if converted_video_path:
                with open(converted_video_path, "rb") as converted_video:
                    video_id = upload_media(converted_video, filename=output_filename)

        return jsonify({"status": "success", "message": "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!"})

    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500
