from flask import Flask, render_template, request, jsonify
import requests
import os
import random

app = Flask(__name__)

# WooCommerce API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
WC_API_URL = os.getenv("WC_API_URL", "https://karal.az/wp-json/wc/v3")
WC_MEDIA_URL = os.getenv("WC_MEDIA_URL", "https://karal.az/wp-json/wp/v2/media")
WC_CONSUMER_KEY = os.getenv("WC_CONSUMER_KEY")
WC_CONSUMER_SECRET = os.getenv("WC_CONSUMER_SECRET")

# –ü—Ä–æ–±—ã –∑–æ–ª–æ—Ç–∞ —Å ID
GOLD_PURITY_MAP = {
    "105": "585 (14K)",
    "106": "750 (18K)"
}

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
CATEGORY_TITLES = {
    "126": ("Qƒ±zƒ±l √ºz√ºk", "qizil-uzuk"),
    "132": ("Qƒ±zƒ±l sƒ±rƒüa", "qizil-sirqa"),
    "140": ("Qƒ±zƒ±l sep", "qizil-sep"),
    "138": ("Qƒ±zƒ±l qolbaq", "qizil-qolbaq"),
    "144": ("Qƒ±zƒ±l d…ôst komplekt", "qizil-komplet-dest")
}

# –û–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
DESCRIPTION_TEMPLATES = {
    "126": [
        "üîπ Yeni qƒ±zƒ±l √ºz√ºk modeli. Z…ôrif dizaynƒ± il…ô g√ºnd…ôlik v…ô x√ºsusi g√ºnl…ôr √º√ß√ºn ideal se√ßim! ‚ú®",
        "üíç Z√∂vql√º dizayn v…ô y√ºks…ôk keyfiyy…ôt! Bu unikal qƒ±zƒ±l √ºz√ºk z…ôrifliyi v…ô inc…ôliyi il…ô se√ßilir. ‚ú®",
        "‚ú® Qƒ±zƒ±lƒ±n …ôb…ôdi g√∂z…ôlliyi! Z…ôriflik, inc…ôlik v…ô y√ºks…ôk keyfiyy…ôt ‚Äì bu qƒ±zƒ±l √ºz√ºk h…ôr anƒ±nƒ±zƒ± daha x√ºsusi ed…ôc…ôk."
    ],
    "132": ["Yeni qƒ±zƒ±l sƒ±rƒüa modeli. √á…ôkisi: {weight}g, ∆èyarƒ±: {gold_purity}"],
    "140": ["Yeni qƒ±zƒ±l sep modeli."],
    "138": ["Yeni qƒ±zƒ±l qolbaq modeli."],
    "144": ["Yeni qƒ±zƒ±l komplekt."]
}

@app.route("/")
def home():
    return render_template("index.html", categories=CATEGORY_TITLES, gold_purity_map=GOLD_PURITY_MAP)

@app.route("/add-product", methods=["POST"])
def add_product():
    try:
        category_id = request.form.get("category")
        weight = request.form.get("weight")
        gold_purity_id = request.form.get("gold_purity")
        price = request.form.get("price")
        sale_price = request.form.get("sale_price", "0")

        product_name, slug_base = CATEGORY_TITLES.get(category_id, ("Qƒ±zƒ±l m…ôhsul", "qizil-mehsul"))
        description_template = random.choice(DESCRIPTION_TEMPLATES.get(category_id, ["Yeni qƒ±zƒ±l m…ôhsul."]))
        description = description_template.format(weight=weight, gold_purity=GOLD_PURITY_MAP.get(gold_purity_id, "N/A"))

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ WooCommerce
        image_url = None
        if 'image' in request.files:
            image_file = request.files['image']
            if image_file.filename:
                image_url = upload_image_to_wc(image_file)

        if not image_url:
            return jsonify({"status": "error", "message": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"}), 400

        product_data = {
            "name": product_name,
            "slug": f"{slug_base}-{random.randint(1000, 9999)}",
            "type": "simple",
            "regular_price": price,
            "sale_price": sale_price if sale_price != "0" else None,
            "categories": [{"id": int(category_id)}],
            "description": description,
            "images": [{"src": image_url}],
            "attributes": [
                {
                    "id": 2,  # ID –∞—Ç—Ä–∏–±—É—Ç–∞ ∆èyar
                    "options": [GOLD_PURITY_MAP.get(gold_purity_id, "N/A")],
                    "visible": True,
                    "variation": False
                }
            ],
            "meta_data": [
                {
                    "key": "_weight",
                    "value": f"{weight} g"
                }
            ]
        }

        url = f"{WC_API_URL}/products"
        params = {
            "consumer_key": WC_CONSUMER_KEY,
            "consumer_secret": WC_CONSUMER_SECRET
        }
        response = requests.post(url, json=product_data, params=params)

        if response.status_code == 201:
            product_id = response.json().get("id")
            product_url = f"https://karal.az/product/{product_id}"
            return jsonify({"status": "success", "message": "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", "url": product_url})
        else:
            return jsonify({
                "status": "error",
                "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.",
                "details": response.text
            }), 400

    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

# **–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ WooCommerce —á–µ—Ä–µ–∑ API**
def upload_image_to_wc(image_file):
    try:
        url = WC_MEDIA_URL
        params = {
            "consumer_key": WC_CONSUMER_KEY,
            "consumer_secret": WC_CONSUMER_SECRET
        }
        files = {
            "file": (image_file.filename, image_file.stream, image_file.content_type)
        }
        headers = {
            "Content-Disposition": f"attachment; filename={image_file.filename}",
            "Content-Type": image_file.content_type
        }

        response = requests.post(url, files=files, params=params, headers=headers)

        if response.status_code == 201:
            return response.json().get("source_url")
        else:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {response.text}")
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=8080)
