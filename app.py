from flask import Flask, render_template, request, jsonify
import requests
import os
import base64
import random
import tempfile
import threading
import ffmpeg

app = Flask(__name__)

# WooCommerce API –¥–∞–Ω–Ω—ã–µ
WC_API_URL = os.getenv("WC_API_URL", "https://karal.az/wp-json/wc/v3")
WC_CONSUMER_KEY = os.getenv("WC_CONSUMER_KEY")
WC_CONSUMER_SECRET = os.getenv("WC_CONSUMER_SECRET")

# WordPress API –¥–∞–Ω–Ω—ã–µ
WP_USERNAME = os.getenv("WP_USERNAME", "alikitto")
WP_PASSWORD = os.getenv("WP_PASSWORD", "HsbD0gjVhsj0Fb1KXrMx4nLQ")
WP_MEDIA_URL = "https://karal.az/wp-json/wp/v2/media"

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è WordPress API
auth = base64.b64encode(f"{WP_USERNAME}:{WP_PASSWORD}".encode()).decode()
HEADERS = {"Authorization": f"Basic {auth}"}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ
RESOLUTION = 720  # –†–∞–∑–º–µ—Ä –∫–∞–¥—Ä–∞ (720x720)
BITRATE = "2500k"  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç
THREADS = 2  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ WordPress
def upload_media(file, filename=None):
    if not file:
        return None, None

    filename = filename or file.filename
    print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª: {filename}")

    files = {"file": (filename, file, "video/mp4" if filename.endswith(".mp4") else file.content_type)}
    response = requests.post(WP_MEDIA_URL, headers=HEADERS, files=files)

    if response.status_code == 201:
        media_id = response.json().get("id")
        media_url = response.json().get("source_url")
        print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω! ID: {media_id}, URL: {media_url}")
        return media_id, media_url
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {response.text}")
        return None, None

# –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
def process_video(video_url, output_filename):
    try:
        temp_output = os.path.join(tempfile.gettempdir(), output_filename)

        print(f"üîΩ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ {video_url} –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        temp_input = tempfile.NamedTemporaryFile(delete=False, suffix=".mp4")
        with requests.get(video_url, stream=True) as r:
            with open(temp_input.name, "wb") as f:
                for chunk in r.iter_content(1024):
                    f.write(chunk)

        print("üé¨ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤–∏–¥–µ–æ...")

        probe = ffmpeg.probe(temp_input.name)
        video_stream = next((stream for stream in probe["streams"] if stream["codec_type"] == "video"), None)
        width, height = int(video_stream["width"]), int(video_stream["height"])

        # –û–±—Ä–µ–∑–∫–∞ –≤–∏–¥–µ–æ –≤ 1:1 (–ø–æ —Ü–µ–Ω—Ç—Ä—É)
        crop_size = min(width, height)
        x_offset = (width - crop_size) // 2
        y_offset = (height - crop_size) // 2

        (
            ffmpeg
            .input(temp_input.name)
            .filter("crop", crop_size, crop_size, x_offset, y_offset)
            .filter("scale", RESOLUTION, RESOLUTION)
            .output(temp_output, vcodec="libx264", acodec="aac", bitrate=BITRATE, threads=THREADS)
            .run(overwrite_output=True)
        )

        print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {temp_output}")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ –≤ WordPress (–∑–∞–º–µ–Ω–∞ —Ñ–∞–π–ª–∞)
        with open(temp_output, "rb") as converted_video:
            upload_media(converted_video, filename=output_filename)

        print("üîÑ –í–∏–¥–µ–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ WordPress!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {e}")

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route("/")
def home():
    return render_template("index.html", categories=CATEGORY_DATA)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@app.route("/add-product", methods=["POST"])
def add_product():
    try:
        category_id = request.form.get("category")
        weight = request.form.get("weight")
        gold_purity_id = request.form.get("gold_purity")
        price = request.form.get("price")
        sale_price = request.form.get("sale_price", "0")
        image = request.files.get("image")
        video = request.files.get("video")

        if not category_id or not weight or not price:
            return jsonify({"status": "error", "message": "‚ùå –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"}), 400

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ slug
        product_name = f"–¢–æ–≤–∞—Ä-{random.randint(1000, 9999)}"
        product_slug = f"product-{random.randint(1000, 9999)}"

        print(f"üõí –°–æ–∑–¥–∞—ë–º —Ç–æ–≤–∞—Ä: {product_name}, Slug: {product_slug}, –í–µ—Å: {weight}, –¶–µ–Ω–∞: {price}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_id, _ = upload_media(image) if image else (None, None)
        if not image_id:
            return jsonify({"status": "error", "message": "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"}), 400

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
        video_id, video_url = upload_media(video) if video else (None, None)

        # –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
        if video_url:
            output_filename = f"{product_name.replace(' ', '_')}-{product_slug}.mp4"
            threading.Thread(target=process_video, args=(video_url, output_filename)).start()

        # –î–∞–Ω–Ω—ã–µ –¥–ª—è WooCommerce
        product_data = {
            "name": product_name,
            "slug": product_slug,
            "type": "simple",
            "regular_price": price,
            "sale_price": sale_price if sale_price != "0" else None,
            "categories": [{"id": int(category_id)}],
            "description": f"Yeni {product_name} modeli. √á…ôkisi: {weight}g",
            "images": [{"id": image_id}],
            "meta_data": [{"key": "_weight", "value": weight}, {"key": "_product_video_autoplay", "value": "on"}]
        }

        if video_id:
            product_data["meta_data"].append({"key": "_product_video_gallery", "value": video_id})

        response = requests.post(f"{WC_API_URL}/products", json=product_data, params={"consumer_key": WC_CONSUMER_KEY, "consumer_secret": WC_CONSUMER_SECRET})

        return jsonify({"status": "success", "message": "‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"})

    except Exception as e:
        return jsonify({"status": "error", "message": str(e)}), 500

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=8080)
