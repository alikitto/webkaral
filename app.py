from flask import Flask, render_template, request, jsonify
import requests
import os
import base64
import random
import tempfile
import ffmpeg
import PIL
from PIL import Image

app = Flask(__name__)

# WooCommerce API
WC_API_URL = os.getenv("WC_API_URL", "https://karal.az/wp-json/wc/v3")
WC_CONSUMER_KEY = os.getenv("WC_CONSUMER_KEY")
WC_CONSUMER_SECRET = os.getenv("WC_CONSUMER_SECRET")

# WordPress API
WP_USERNAME = os.getenv("WP_USERNAME", "alikitto")
WP_PASSWORD = os.getenv("WP_PASSWORD", "HsbD0gjVhsj0Fb1KXrMx4nLQ")
WP_MEDIA_URL = "https://karal.az/wp-json/wp/v2/media"

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
auth = base64.b64encode(f"{WP_USERNAME}:{WP_PASSWORD}".encode()).decode()
HEADERS = {"Authorization": f"Basic {auth}"}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ –∏ —Ñ–æ—Ç–æ
RESOLUTION_VIDEO = (720, 900)  # 4:5 —Ñ–æ—Ä–º–∞—Ç
RESOLUTION_IMAGE = (720, 900)  # 4:5 —Ñ–æ—Ä–º–∞—Ç
BITRATE = "2500k"

CATEGORY_DATA = {
    "126": {"name": "Qƒ±zƒ±l √ºz√ºk", "slug": "qizil-uzuk"},
    "132": {"name": "Qƒ±zƒ±l sƒ±rƒüa", "slug": "qizil-sirqa"},
    "140": {"name": "Qƒ±zƒ±l sep", "slug": "qizil-sep"},
    "138": {"name": "Qƒ±zƒ±l qolbaq", "slug": "qizil-qolbaq"},
    "144": {"name": ["Qƒ±zƒ±l d…ôst", "Qƒ±zƒ±l komplekt"], "slug": "qizil-komplekt-dest"}
}

GOLD_PURITY_MAP = {
    "105": "585 (14K)",
    "106": "750 (18K)"
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ WordPress
import mimetypes

def upload_media(file, filename=None):
    """ –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ WordPress –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID """
    if not file:
        print("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
        return None

    filename = filename or "uploaded_file.jpg"
    print(f"üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª: {filename}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø —Ñ–∞–π–ª–∞
    mime_type, _ = mimetypes.guess_type(filename)
    if not mime_type:
        mime_type = "application/octet-stream"  # –§–æ–ª–±—ç–∫ –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞

    files = {"file": (filename, file, mime_type)}
    response = requests.post(WP_MEDIA_URL, headers=HEADERS, files=files)

    if response.status_code == 201:
        media_id = response.json().get("id")
        print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω! ID: {media_id}")
        return media_id
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.text}")
        return None

# –û–±—Ä–µ–∑–∫–∞ –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ 4:5
def process_image(image):
    try:
        temp_input = tempfile.NamedTemporaryFile(delete=False, suffix=".jpg")
        temp_output = tempfile.NamedTemporaryFile(delete=False, suffix=".jpg").name

        image.save(temp_input.name)

        img = Image.open(temp_input.name)
        width, height = img.size

        target_width, target_height = RESOLUTION_IMAGE

        # –û–±—Ä–µ–∑–∫–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        if width / height > target_width / target_height:
            new_width = int(height * target_width / target_height)
            left = (width - new_width) / 2
            right = left + new_width
            img = img.crop((left, 0, right, height))
        else:
            new_height = int(width * target_height / target_width)
            top = (height - new_height) / 2
            bottom = top + new_height
            img = img.crop((0, top, width, bottom))

        img = img.resize(RESOLUTION_IMAGE)  # ‚úÖ –£–±—Ä–∞–ª–∏ Image.ANTIALIAS
        img.save(temp_output, format="JPEG")

        return temp_output
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        return None

# –û–±—Ä–µ–∑–∫–∞ –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ 4:5
def convert_and_crop_video(video, output_filename):
    try:
        temp_input = tempfile.NamedTemporaryFile(delete=False, suffix=".mov")
        temp_output = os.path.join(tempfile.gettempdir(), output_filename)

        print(f"üîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ {video.filename} –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_input.name}")
        video.save(temp_input.name)

        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤–∏–¥–µ–æ –≤ 4:5...")

        ffmpeg.input(temp_input.name).filter(
            "crop", f"min(iw,ih)", f"min(iw,ih)", f"(iw-min(iw,ih))/2", f"(ih-min(iw,ih))/2"
        ).filter(
            "scale", RESOLUTION_VIDEO[0], RESOLUTION_VIDEO[1]
        ).output(
            temp_output, vcodec="libx264", acodec="aac", bitrate=BITRATE
        ).run(overwrite_output=True)

        print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {temp_output}")
        return temp_output
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {e}")
        return None

@app.route("/")
def home():
    return render_template("index.html", categories=CATEGORY_DATA)

@app.route("/add-product", methods=["POST"])
def add_product():
    try:
        print("üìå [INFO] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")

        category_id = request.form.get("category")
        weight = request.form.get("weight")
        gold_purity_id = request.form.get("gold_purity")
        price = request.form.get("price")
        sale_price = request.form.get("sale_price", "0")
        image = request.files.get("image")
        video = request.files.get("video")

        if not category_id or not weight or not price:
            print("‚ùå [ERROR] –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
            return jsonify({"status": "error", "message": "‚ùå –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"}), 400

        gold_purity = GOLD_PURITY_MAP.get(gold_purity_id, "585 (14K)")
        category_info = CATEGORY_DATA.get(category_id, {})
        product_name = random.choice(category_info["name"]) if isinstance(category_info["name"], list) else category_info["name"]

        print(f"üìå [INFO] –°–æ–∑–¥–∞—ë–º —Ç–æ–≤–∞—Ä: {product_name}, –í–µ—Å: {weight}, –¶–µ–Ω–∞: {price}")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_id = None
        if image:
            processed_image = process_image(image)
            if processed_image:
                print("üìå [INFO] –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
                with open(processed_image, "rb") as img_file:
                    image_id = upload_media(img_file, filename=os.path.basename(processed_image))

        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
        video_id = None
        if video:
            output_filename = f"{product_name.replace(' ', '_')}.mp4"
            converted_video_path = convert_and_crop_video(video, output_filename)
            if converted_video_path:
                with open(converted_video_path, "rb") as converted_video:
                    print("üìå [INFO] –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ...")
                    video_id = upload_media(converted_video, filename=output_filename)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ —Ñ–∞–π–ª—ã
        print(f"‚úÖ [INFO] –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ID: {image_id}")
        print(f"‚úÖ [INFO] –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ ID: {video_id}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è WooCommerce
        product_data = {
            "name": product_name,
            "regular_price": price,
            "sale_price": sale_price if sale_price != "0" else None,
            "categories": [{"id": int(category_id)}],
            "images": [{"id": image_id}] if image_id else [],
            "meta_data": [
                {"key": "_weight", "value": weight},
                {"key": "_product_video_autoplay", "value": "on"},
                {"key": "_gold_purity", "value": gold_purity}
            ]
        }

        if video_id:
            product_data["meta_data"].append({"key": "_product_video_gallery", "value": video_id})

        print("üìå [INFO] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞...")
        response = requests.post(
            WC_API_URL + "/products",
            json=product_data,
            params={"consumer_key": WC_CONSUMER_KEY, "consumer_secret": WC_CONSUMER_SECRET}
        )

        print(f"üìå [INFO] –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ WooCommerce: {response.status_code}")
        print(f"üìå [INFO] –î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞: {response.text}")

        if response.status_code == 201:
            return jsonify({"status": "success", "message": "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!"})
        else:
            print("‚ùå [ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")
            return jsonify({"status": "error", "message": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞"}), 400

    except Exception as e:
        print(f"‚ùå [ERROR] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ add_product: {e}")
        return jsonify({"status": "error", "message": str(e)}), 500



