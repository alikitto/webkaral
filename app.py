def convert_video_without_resizing(video, filename_slug):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∏–¥–µ–æ –≤ MP4 –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞"""
    try:
        temp_input = tempfile.NamedTemporaryFile(delete=False, suffix=".mov")
        temp_output = os.path.join(tempfile.gettempdir(), f"{filename_slug}.mp4")

        print(f"üîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ {video.filename} –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_input.name}")
        video.save(temp_input.name)

        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ MP4 –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞...")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        ffmpeg.input(temp_input.name).output(
            temp_output, vcodec="libx264", acodec="aac", bitrate="2000k"
        ).run(overwrite_output=True)

        print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {temp_output}")
        return temp_output
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {e}")
        return None


def convert_and_crop_video(video, filename_slug):
    """ –û–±—Ä–µ–∑–∫–∞ –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç 1:1 –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ MP4 (720x720) """
    try:
        temp_input = tempfile.NamedTemporaryFile(delete=False, suffix=".mov")
        temp_output = os.path.join(tempfile.gettempdir(), f"{filename_slug}_cropped.mp4")

        print(f"üîÑ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ {video.filename} –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_input.name}")
        video.save(temp_input.name)

        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–µ–∑–∫—É –≤–∏–¥–µ–æ –≤ 1:1 (720x720)...")

        # –û–±—Ä–µ–∑–∞–µ–º –≤ 1:1 (—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º)
        ffmpeg.input(temp_input.name).filter(
            "crop", "min(iw,ih)", "min(iw,ih)", "(iw-min(iw,ih))/2", "(ih-min(iw,ih))/2"
        ).filter(
            "scale", 720, 720
        ).output(
            temp_output, vcodec="libx264", acodec="aac", bitrate="2000k"
        ).run(overwrite_output=True)

        print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏ –æ–±—Ä–µ–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã: {temp_output}")
        return temp_output
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {e}")
        return None


def upload_video_to_ftp(video_path, filename_slug):
    """ –ó–∞–≥—Ä—É–∂–∞–µ—Ç MP4 –≤–∏–¥–µ–æ –Ω–∞ FTP """
    try:
        print("üìå [DEBUG] –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ FTP —Å–µ—Ä–≤–µ—Ä—É...")

        ftp = FTP(FTP_HOST)
        ftp.login(FTP_USER, FTP_PASS)

        ftp.cwd("/wp-content/uploads/original_videos/")
        print(f"üìå [DEBUG] –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è FTP: {ftp.pwd()}")

        with open(video_path, "rb") as file:
            print(f"üìå [DEBUG] –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª {filename_slug}.mp4 ...")
            ftp.storbinary(f"STOR {filename_slug}.mp4", file)

        print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ FTP: /wp-content/uploads/original_videos/{filename_slug}.mp4")

        ftp.quit()
        return f"https://karal.az/wp-content/uploads/original_videos/{filename_slug}.mp4"
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –ø–æ FTP: {e}")
        return None


@app.route("/add-product", methods=["POST"])
def add_product():
    try:
        print("üìå [INFO] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")

        category_id = request.form.get("category")
        weight = request.form.get("weight")
        gold_purity_id = request.form.get("gold_purity")
        price = request.form.get("price")
        sale_price = request.form.get("sale_price", "0")
        image = request.files.get("image")
        video = request.files.get("video")

        if not category_id or not weight or not price:
            print("‚ùå [ERROR] –ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
            return jsonify({"status": "error", "message": "‚ùå –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"}), 400

        gold_purity = GOLD_PURITY_MAP.get(gold_purity_id, "585 (14K)")
        category_info = CATEGORY_DATA.get(category_id, {})
        product_name = random.choice(category_info["name"]) if isinstance(category_info["name"], list) else category_info["name"]
        product_slug = f"{category_info['slug']}-{random.randint(1000, 9999)}"

        print(f"üìå [INFO] –°–æ–∑–¥–∞—ë–º —Ç–æ–≤–∞—Ä: {product_name}, Slug: {product_slug}, –í–µ—Å: {weight}, –¶–µ–Ω–∞: {price}")

        # 1Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª —Ñ–æ—Ç–æ –≤ `/original_photos/`
        original_photo_url = None
        if image:
            original_photo_url = save_original_file(image, product_slug, "original_photos")

        # 2Ô∏è‚É£ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ WordPress (1000x1000)
        image_id = None
        if image:
            processed_image = process_image(image, product_slug)
            if processed_image:
                with open(processed_image, "rb") as img_file:
                    image_id = upload_media(img_file, filename=f"{product_slug}.jpg")

        # 3Ô∏è‚É£ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º MOV –≤ MP4 (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ FTP
        original_video_url = None
        if video:
            original_mp4 = convert_video_without_resizing(video, product_slug)
            if original_mp4:
                original_video_url = upload_video_to_ftp(original_mp4, product_slug)  # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—Å—Ç—É–ø


        # 4Ô∏è‚É£ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –≤ WordPress (720x720)
        video_id = None
        if video:
            converted_video_path = convert_and_crop_video(video, product_slug)
            if converted_video_path:
                with open(converted_video_path, "rb") as converted_video:
                    video_id = upload_media(converted_video, filename=f"{product_slug}.mp4")

        print(f"‚úÖ [INFO] –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ: {original_photo_url}")
        print(f"‚úÖ [INFO] –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ID: {image_id}")
        print(f"‚úÖ [INFO] –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ: {original_video_url}")
        print(f"‚úÖ [INFO] –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ ID: {video_id}")

        # 5Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º —Ç–æ–≤–∞—Ä –≤ WooCommerce
        product_data = {
            "name": product_name,
            "slug": product_slug,
            "regular_price": price,
            "sale_price": sale_price if sale_price != "0" else None,
            "categories": [{"id": int(category_id)}],
            "images": [{"id": image_id}] if image_id else [],
            "attributes": [
                {"id": 2, "name": "∆èyar", "options": [gold_purity], "visible": True, "variation": False}
            ],
            "meta_data": [
                {"key": "_weight", "value": weight},
                {"key": "_product_video_autoplay", "value": "on"},
                {"key": "_gold_purity", "value": gold_purity}
            ]
        }

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—ã –≤ –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ
        if original_photo_url:
            product_data["meta_data"].append({"key": "_original_photo_url", "value": original_photo_url})
        if original_video_url:
            product_data["meta_data"].append({"key": "_original_video_url", "value": original_video_url})

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ WooCommerce
        if video_id:
            product_data["meta_data"].append({"key": "_product_video_gallery", "value": video_id})

        print("üìå [INFO] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞...")
        response = requests.post(
            WC_API_URL + "/products",
            json=product_data,
            params={"consumer_key": WC_CONSUMER_KEY, "consumer_secret": WC_CONSUMER_SECRET}
        )

        print(f"üìå [INFO] –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ WooCommerce: {response.status_code}")
        print(f"üìå [INFO] –î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞: {response.text}")

        if response.status_code == 201:
            return jsonify({"status": "success", "message": "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!"})
        else:
            print("‚ùå [ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")
            return jsonify({"status": "error", "message": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞"}), 400
